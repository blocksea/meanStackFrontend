{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../password-store.service\";\nimport * as i3 from \"@angular/forms\";\nexport class PasswordEditComponent {\n  constructor(route,\n  // Provides access to the current route\n  router,\n  // Used for navigation\n  passwordService // Service for managing passwords\n  ) {\n    this.route = route;\n    this.router = router;\n    this.passwordService = passwordService;\n    this.isSaving = false; // Indicates if the form is currently being saved\n  }\n\n  ngOnInit() {\n    const id = this.route.snapshot.paramMap.get('id'); // Retrieves the 'id' parameter from the route\n    if (id !== null) {\n      // Fetch the password details from the password service based on the ID\n      this.passwordService.getPasswordById(id).subscribe(password => {\n        this.password = password;\n        this.decryptedPassword = atob(password.encryptedPassword);\n        // debug line\n        console.log(this.password);\n      });\n    } else {\n      // Set default values for a new password\n      this.password = {\n        category: '',\n        app: '',\n        userName: '',\n        encryptedPassword: ''\n      };\n    }\n  }\n  save() {\n    // Check if all required fields are filled\n    if (!this.password.category || !this.password.app || !this.password.userName || !this.decryptedPassword) {\n      alert('Please enter all the fields!');\n      return;\n    }\n    this.isSaving = true; // Set saving flag to true\n    if (this.password._id === undefined) {\n      // Add a new password\n      this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password\n      this.passwordService.addPassword(this.password).subscribe(() => {\n        this.isSaving = false; // Set saving flag to false\n        this.goBack(); // Navigate back\n      });\n    } else {\n      // Update an existing password\n      if (this.decryptedPassword) {\n        this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password if it exists\n      }\n\n      this.passwordService.updatePassword(this.password._id, this.password).subscribe(() => {\n        this.isSaving = false; // Set saving flag to false\n        this.goBack(); // Navigate back\n      });\n    }\n  }\n\n  goBack() {\n    this.router.navigate(['/passwords']); // Navigate back to the password manager page\n  }\n\n  togglePasswordVisibility() {\n    // Toggle password visibility\n    const passwordField = document.getElementById('encryptedPassword');\n    const toggleButton = document.getElementById('togglePasswordVisibilityButton');\n    const toggleButtonIcon = toggleButton.querySelector('i');\n    if (toggleButtonIcon) {\n      if (passwordField.type === 'password') {\n        passwordField.type = 'text'; // Show the password\n        toggleButtonIcon.classList.remove('fa-eye');\n        toggleButtonIcon.classList.add('fa-eye-slash');\n      } else {\n        passwordField.type = 'password'; // Hide the password\n        toggleButtonIcon.classList.remove('fa-eye-slash');\n        toggleButtonIcon.classList.add('fa-eye');\n      }\n    }\n  }\n}\nPasswordEditComponent.ɵfac = function PasswordEditComponent_Factory(t) {\n  return new (t || PasswordEditComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.PasswordService));\n};\nPasswordEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PasswordEditComponent,\n  selectors: [[\"app-password-edit\"]],\n  decls: 23,\n  vars: 4,\n  consts: [[1, \"edit-card\"], [1, \"pass-form\"], [1, \"form-group\"], [\"for\", \"category\"], [\"type\", \"text\", \"id\", \"category\", \"name\", \"category\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"app\"], [\"type\", \"text\", \"id\", \"app\", \"name\", \"app\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"userName\"], [\"type\", \"text\", \"id\", \"userName\", \"name\", \"userName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"encryptedPassword\"], [1, \"input-group\"], [\"type\", \"password\", \"id\", \"encryptedPassword\", \"name\", \"encryptedPassword\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", \"id\", \"togglePasswordVisibilityButton\", 1, \"show-btn\", 3, \"click\"], [\"id\", \"togglePasswordVisibilityIcon\", 1, \"fas\", \"fa-eye\"], [1, \"save-btn\", 3, \"click\"]],\n  template: function PasswordEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Category:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.password.category = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 2)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Application:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.password.app = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 7);\n      i0.ɵɵtext(12, \"Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.password.userName = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 9);\n      i0.ɵɵtext(16, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 10)(18, \"input\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.decryptedPassword = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function PasswordEditComponent_Template_button_click_19_listener() {\n        return ctx.togglePasswordVisibility();\n      });\n      i0.ɵɵelement(20, \"i\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function PasswordEditComponent_Template_button_click_21_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(22, \"Save New Password\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.password.category);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.password.app);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.password.userName);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.decryptedPassword);\n    }\n  },\n  dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.RequiredValidator, i3.NgModel],\n  styles: [\".pass-form[_ngcontent-%COMP%] {\\r\\n    background-color: #e6e7efd0;\\r\\n    color: #292727;\\r\\n    padding: 30px 40px;\\r\\n    margin-bottom: 30px;\\r\\n    margin-top: 30px;\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n    border-collapse: collapse;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n    display: block;\\r\\n    margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.form-control[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n    padding: 10px;\\r\\n    border-radius: 5px;\\r\\n    border: 1px solid #6d81d8;\\r\\n    font-size: 16px;\\r\\n    margin-bottom: 20px;\\r\\n    color: #292727;\\r\\n    background-color: #ece9e9;\\r\\n}\\r\\n\\r\\n.show-btn[_ngcontent-%COMP%] {\\r\\n    background-color: #21897E;\\r\\n    padding: 11px 20px;\\r\\n    margin-right: 10px;\\r\\n    color: #f1efec;\\r\\n    border-radius: 5px;\\r\\n    border: 1px solid #22463b;\\r\\n    cursor: pointer;\\r\\n    transition: background-color 0.2s ease-out;\\r\\n    font-size: 18px;\\r\\n}\\r\\n\\r\\n.show-btn[_ngcontent-%COMP%]:hover, .save-btn[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #23af85;\\r\\n    box-shadow: 0px 2px 9px #8e8d91;\\r\\n    transition-delay: 0.3s;\\r\\n}\\r\\n\\r\\n.save-btn[_ngcontent-%COMP%] {\\r\\n    background-color: #21897E;\\r\\n    padding: 14px;\\r\\n    color: #f1efec;\\r\\n    border-radius: 5px;\\r\\n    border: 1px solid #22463b;\\r\\n    font-size: 14px;\\r\\n    cursor: pointer;\\r\\n    transition: background-color 0.2s ease-out;\\r\\n}\\r\\n\\r\\n.edit-card[_ngcontent-%COMP%] {\\r\\n    max-width: 1200px;\\r\\n    margin: 0 auto;\\r\\n    background-color: #d0d4e873;\\r\\n    color: #f3f3f3;\\r\\n    padding: 10px 40px;\\r\\n    margin-bottom: 30px;\\r\\n    margin-top: 30px;\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFzc3dvcmQtZWRpdC9wYXNzd29yZC1lZGl0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQix1Q0FBdUM7SUFDdkMseUJBQXlCO0lBQ3pCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztJQUNkLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsMENBQTBDO0lBQzFDLGVBQWU7QUFDbkI7O0FBRUE7O0lBRUkseUJBQXlCO0lBQ3pCLCtCQUErQjtJQUMvQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsYUFBYTtJQUNiLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLGVBQWU7SUFDZixlQUFlO0lBQ2YsMENBQTBDO0FBQzlDOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQix1Q0FBdUM7QUFDM0MiLCJzb3VyY2VzQ29udGVudCI6WyIucGFzcy1mb3JtIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlNmU3ZWZkMDtcclxuICAgIGNvbG9yOiAjMjkyNzI3O1xyXG4gICAgcGFkZGluZzogMzBweCA0MHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxufVxyXG5cclxuLmZvcm0tZ3JvdXAgbGFiZWwge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG5cclxuLmZvcm0tY29udHJvbCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNmQ4MWQ4O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICAgIGNvbG9yOiAjMjkyNzI3O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VjZTllOTtcclxufVxyXG5cclxuLnNob3ctYnRuIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTg5N0U7XHJcbiAgICBwYWRkaW5nOiAxMXB4IDIwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICBjb2xvcjogI2YxZWZlYztcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMyMjQ2M2I7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZS1vdXQ7XHJcbiAgICBmb250LXNpemU6IDE4cHg7XHJcbn1cclxuXHJcbi5zaG93LWJ0bjpob3ZlcixcclxuLnNhdmUtYnRuOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyM2FmODU7XHJcbiAgICBib3gtc2hhZG93OiAwcHggMnB4IDlweCAjOGU4ZDkxO1xyXG4gICAgdHJhbnNpdGlvbi1kZWxheTogMC4zcztcclxufVxyXG5cclxuLnNhdmUtYnRuIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTg5N0U7XHJcbiAgICBwYWRkaW5nOiAxNHB4O1xyXG4gICAgY29sb3I6ICNmMWVmZWM7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMjI0NjNiO1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2Utb3V0O1xyXG59XHJcblxyXG4uZWRpdC1jYXJkIHtcclxuICAgIG1heC13aWR0aDogMTIwMHB4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDBkNGU4NzM7XHJcbiAgICBjb2xvcjogI2YzZjNmMztcclxuICAgIHBhZGRpbmc6IDEwcHggNDBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["PasswordEditComponent","constructor","route","router","passwordService","ngOnInit","id","snapshot","paramMap","get","getPasswordById","subscribe","password","decryptedPassword","atob","encryptedPassword","console","log","category","app","userName","save","alert","isSaving","_id","undefined","btoa","addPassword","goBack","updatePassword","navigate","togglePasswordVisibility","passwordField","document","getElementById","toggleButton","toggleButtonIcon","querySelector","type","classList","remove","add","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\meanStackFrontend\\src\\app\\password-edit\\password-edit.component.ts","C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\meanStackFrontend\\src\\app\\password-edit\\password-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Password } from '../password.interface';\r\nimport { PasswordService } from '../password-store.service';\r\n\r\n@Component({\r\n  selector: 'app-password-edit',\r\n  templateUrl: './password-edit.component.html',\r\n  styleUrls: ['./password-edit.component.css']\r\n})\r\nexport class PasswordEditComponent implements OnInit {\r\n\r\n  password!: Password; // Represents the password object\r\n  decryptedPassword!: string; // Stores the decrypted password value\r\n  isSaving = false; // Indicates if the form is currently being saved\r\n\r\n  constructor(\r\n    private route: ActivatedRoute, // Provides access to the current route\r\n    private router: Router, // Used for navigation\r\n    private passwordService: PasswordService // Service for managing passwords\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const id = this.route.snapshot.paramMap.get('id')!; // Retrieves the 'id' parameter from the route\r\n    \r\n    if (id !== null) {\r\n      // Fetch the password details from the password service based on the ID\r\n      this.passwordService.getPasswordById(id).subscribe((password) => {\r\n        this.password = password;\r\n        this.decryptedPassword = atob(password.encryptedPassword);\r\n        // debug line\r\n        console.log(this.password);\r\n      });\r\n    } else {\r\n      // Set default values for a new password\r\n      this.password = {\r\n        category: '',\r\n        app: '',\r\n        userName: '',\r\n        encryptedPassword: ''\r\n      };\r\n    }\r\n  }\r\n\r\n  save(): void {\r\n    // Check if all required fields are filled\r\n    if (!this.password.category || !this.password.app || !this.password.userName || !this.decryptedPassword) {\r\n      alert('Please enter all the fields!');\r\n      return;\r\n    }\r\n\r\n    this.isSaving = true; // Set saving flag to true\r\n    \r\n    if (this.password._id === undefined) {\r\n      // Add a new password\r\n      this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password\r\n      this.passwordService.addPassword(this.password)\r\n        .subscribe(() => {\r\n          this.isSaving = false; // Set saving flag to false\r\n          this.goBack(); // Navigate back\r\n        });\r\n    } else {\r\n      // Update an existing password\r\n      if (this.decryptedPassword) {\r\n        this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password if it exists\r\n      }\r\n      this.passwordService.updatePassword(this.password._id!, this.password)\r\n        .subscribe(() => {\r\n          this.isSaving = false; // Set saving flag to false\r\n          this.goBack(); // Navigate back\r\n        });\r\n    }\r\n  }\r\n\r\n  goBack(): void {\r\n    this.router.navigate(['/passwords']); // Navigate back to the password manager page\r\n  }\r\n\r\n  togglePasswordVisibility(): void {\r\n    // Toggle password visibility\r\n    const passwordField = document.getElementById('encryptedPassword') as HTMLInputElement;\r\n    const toggleButton = document.getElementById('togglePasswordVisibilityButton') as HTMLButtonElement;\r\n    const toggleButtonIcon = toggleButton.querySelector('i');\r\n\r\n    if (toggleButtonIcon) {\r\n      if (passwordField.type === 'password') {\r\n        passwordField.type = 'text'; // Show the password\r\n        toggleButtonIcon.classList.remove('fa-eye');\r\n        toggleButtonIcon.classList.add('fa-eye-slash');\r\n      } else {\r\n        passwordField.type = 'password'; // Hide the password\r\n        toggleButtonIcon.classList.remove('fa-eye-slash');\r\n        toggleButtonIcon.classList.add('fa-eye');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//Comment explanations:\r\n\r\n//The code represents the TypeScript component for the password edit page.\r\n//It imports necessary dependencies from Angular core and custom files.\r\n//The component class is defined with the necessary properties and methods.\r\n//The constructor injects the required dependencies for the component.\r\n//The ngOnInit() method is called when the component is initialized and retrieves the password details based on the route parameter 'id'.\r\n//The save() method is triggered when the user clicks the save button. It performs form validation and saves or updates the password accordingly.\r\n//The goBack() method is used to navigate back to the password manager page.\r\n//The togglePasswordVisibility() method toggles the visibility of the password field when the corresponding button is clicked.","<!-- Edit card container -->\r\n<div class=\"edit-card\">\r\n\r\n    <!-- Password form -->\r\n    <div class=\"pass-form\">\r\n\r\n        <!-- Category field -->\r\n        <div class=\"form-group\">\r\n            <label for=\"category\">Category:</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"category\" name=\"category\" [(ngModel)]=\"password.category\" required>\r\n        </div>\r\n\r\n        <!-- Application field -->\r\n        <div class=\"form-group\">\r\n            <label for=\"app\">Application:</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"app\" name=\"app\" [(ngModel)]=\"password.app\" required>\r\n        </div>\r\n\r\n        <!-- Username field -->\r\n        <div class=\"form-group\">\r\n            <label for=\"userName\">Username:</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"userName\" name=\"userName\" [(ngModel)]=\"password.userName\" required>\r\n        </div>\r\n\r\n        <!-- Password field -->\r\n        <div class=\"form-group\">\r\n            <label for=\"encryptedPassword\">Password:</label>\r\n            <div class=\"input-group\">\r\n                <input type=\"password\" class=\"form-control\" id=\"encryptedPassword\" name=\"encryptedPassword\" [(ngModel)]=\"decryptedPassword\" required>\r\n\r\n                <!-- Toggle password visibility button -->\r\n                <button class=\"show-btn\" type=\"button\" id=\"togglePasswordVisibilityButton\" (click)=\"togglePasswordVisibility()\"><i id=\"togglePasswordVisibilityIcon\" class=\"fas fa-eye\"></i></button>\r\n\r\n                <!-- Save password button -->\r\n                <button (click)=\"save()\" class=\"save-btn\">Save New Password</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!--Comment explanations:\r\n\r\n    The code represents an edit card containing a password form.\r\n    The form consists of several fields: category, application, username, and password.\r\n    Each field has a corresponding label and input element.\r\n    The ngModel directive is used for two-way data binding to associate the form inputs with the corresponding properties in the component.\r\n    The password field is of type \"password\" to mask the input.\r\n    There is a button to toggle password visibility when clicked.\r\n    A save button is provided to trigger the save() method when clicked.-->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}