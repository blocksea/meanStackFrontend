{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../password-store.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = function (a1) {\n  return [\"/password-edit\", a1];\n};\nfunction PasswordManagerComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\")(12, \"button\", 3);\n    i0.ɵɵtext(13, \"Edit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"td\")(15, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function PasswordManagerComponent_tr_19_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const password_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deletePassword(password_r1));\n    });\n    i0.ɵɵtext(16, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const password_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1._id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.category);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.app);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.userName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.encryptedPassword);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(6, _c0, password_r1 == null ? null : password_r1._id));\n  }\n}\nexport class PasswordManagerComponent {\n  constructor(passwordService, router) {\n    this.passwordService = passwordService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.getPasswords(); // Retrieves the passwords when the component is initialized\n  }\n\n  getPasswords() {\n    // Retrieves all passwords from the password service\n    this.passwordService.getAllPasswords().subscribe(passwords => this.passwords = passwords);\n  }\n  deletePassword(password) {\n    if (confirm('Are you sure you want to delete this password?')) {\n      // Removes the password from the list\n      this.passwords = this.passwords.filter(p => p !== password);\n      // Calls the password service to delete the password\n      this.passwordService.deletePassword(password._id).subscribe();\n    }\n  }\n  editPassword(password) {\n    const link = ['/edit', password._id]; // Constructs the router link for editing the password\n    this.router.navigate(link); // Navigates to the password edit page\n  }\n}\n\nPasswordManagerComponent.ɵfac = function PasswordManagerComponent_Factory(t) {\n  return new (t || PasswordManagerComponent)(i0.ɵɵdirectiveInject(i1.PasswordService), i0.ɵɵdirectiveInject(i2.Router));\n};\nPasswordManagerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PasswordManagerComponent,\n  selectors: [[\"app-password-list\"]],\n  decls: 20,\n  vars: 1,\n  consts: [[1, \"table-card\"], [1, \"pass-table\"], [4, \"ngFor\", \"ngForOf\"], [1, \"edit-btn\", 3, \"routerLink\"], [1, \"delete-btn\", 3, \"click\"]],\n  template: function PasswordManagerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\");\n      i0.ɵɵtext(5, \"#\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\");\n      i0.ɵɵtext(7, \"Category\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"Application\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"th\");\n      i0.ɵɵtext(13, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"th\");\n      i0.ɵɵtext(15, \"Edit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"th\");\n      i0.ɵɵtext(17, \"Delete\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"tbody\");\n      i0.ɵɵtemplate(19, PasswordManagerComponent_tr_19_Template, 17, 8, \"tr\", 2);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngForOf\", ctx.passwords);\n    }\n  },\n  dependencies: [i3.NgForOf, i2.RouterLink],\n  styles: [\".table-card[_ngcontent-%COMP%] {\\r\\n    max-width: 1200px;\\r\\n    margin: 0 auto;\\r\\n    background-color: #d0d4e873;\\r\\n    color: #f3f3f3;\\r\\n    padding: 10px 40px;\\r\\n    margin-bottom: 30px;\\r\\n    margin-top: 30px;\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n}\\r\\n\\r\\n.pass-table[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n    background-color: #e6e7efd0;\\r\\n    color: #292727;\\r\\n    padding: 10px 40px;\\r\\n    margin-bottom: 30px;\\r\\n    margin-top: 30px;\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n    border-collapse: collapse;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\\r\\n.pass-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\r\\n    padding: 12px;\\r\\n    text-align: left;\\r\\n    border-top: 1px solid #6d81d8;\\r\\n}\\r\\n\\r\\n.pass-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\r\\n    padding: 12px;\\r\\n    text-align: left;\\r\\n}\\r\\n\\r\\n.pass-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.edit-btn[_ngcontent-%COMP%], .delete-btn[_ngcontent-%COMP%] {\\r\\n    background-color: #21897E;\\r\\n    padding: 9px 17px;\\r\\n    color: #f1efec;\\r\\n    border-radius: 5px;\\r\\n    border: 1px solid #22463b;\\r\\n    cursor: pointer;\\r\\n    transition: background-color 0.2s ease-out;\\r\\n}\\r\\n\\r\\n.edit-btn[_ngcontent-%COMP%]:hover, .delete-btn[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #23af85;\\r\\n    box-shadow: 0px 2px 9px #8e8d91;\\r\\n    transition-delay: 0.3s;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFzc3dvcmQtbWFuYWdlci9wYXNzd29yZC1tYW5hZ2VyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztJQUNkLDJCQUEyQjtJQUMzQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLHVDQUF1QztBQUMzQzs7QUFFQTtJQUNJLFdBQVc7SUFDWCwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQix1Q0FBdUM7SUFDdkMseUJBQXlCO0lBQ3pCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7O0lBRUkseUJBQXlCO0lBQ3pCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsMENBQTBDO0FBQzlDOztBQUVBOztJQUVJLHlCQUF5QjtJQUN6QiwrQkFBK0I7SUFDL0Isc0JBQXNCO0FBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiLnRhYmxlLWNhcmQge1xyXG4gICAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkMGQ0ZTg3MztcclxuICAgIGNvbG9yOiAjZjNmM2YzO1xyXG4gICAgcGFkZGluZzogMTBweCA0MHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xyXG59XHJcblxyXG4ucGFzcy10YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlNmU3ZWZkMDtcclxuICAgIGNvbG9yOiAjMjkyNzI3O1xyXG4gICAgcGFkZGluZzogMTBweCA0MHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxufVxyXG5cclxuLnBhc3MtdGFibGUgdGQge1xyXG4gICAgcGFkZGluZzogMTJweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzZkODFkODtcclxufVxyXG5cclxuLnBhc3MtdGFibGUgdGgge1xyXG4gICAgcGFkZGluZzogMTJweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbn1cclxuXHJcbi5wYXNzLXRhYmxlIHRoIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4uZWRpdC1idG4sXHJcbi5kZWxldGUtYnRuIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTg5N0U7XHJcbiAgICBwYWRkaW5nOiA5cHggMTdweDtcclxuICAgIGNvbG9yOiAjZjFlZmVjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzIyNDYzYjtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLW91dDtcclxufVxyXG5cclxuLmVkaXQtYnRuOmhvdmVyLFxyXG4uZGVsZXRlLWJ0bjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjNhZjg1O1xyXG4gICAgYm94LXNoYWRvdzogMHB4IDJweCA5cHggIzhlOGQ5MTtcclxuICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuM3M7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;;IAqBYA,0BAAuC;IAC/BA,YAAgB;IAAAA,iBAAK;IAEzBA,0BAAI;IAAAA,YAAqB;IAAAA,iBAAK;IAE9BA,0BAAI;IAAAA,YAAgB;IAAAA,iBAAK;IAEzBA,0BAAI;IAAAA,YAAqB;IAAAA,iBAAK;IAE9BA,0BAAI;IAAAA,aAA8B;IAAAA,iBAAK;IAEvCA,2BAAI;IAC0EA,qBAAI;IAAAA,iBAAS;IAG3FA,2BAAI;IAC2BA;MAAA;MAAA;MAAA;MAAA,OAASA,iDAAwB;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;;;;IAf7EA,eAAgB;IAAhBA,qCAAgB;IAEhBA,eAAqB;IAArBA,0CAAqB;IAErBA,eAAgB;IAAhBA,qCAAgB;IAEhBA,eAAqB;IAArBA,0CAAqB;IAErBA,eAA8B;IAA9BA,mDAA8B;IAGLA,eAAgD;IAAhDA,qGAAgD;;;ACvB7F,OAAM,MAAOC,wBAAwB;EAGnCC,YAAoBC,eAAgC,EAAUC,MAAc;IAAxD,oBAAe,GAAfD,eAAe;IAA2B,WAAM,GAANC,MAAM;EAAY;EAEhFC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE,CAAC,CAAC;EACvB;;EAEAA,YAAY;IACV;IACA,IAAI,CAACH,eAAe,CAACI,eAAe,EAAE,CACnCC,SAAS,CAACC,SAAS,IAAI,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAC;EACvD;EAEAC,cAAc,CAACC,QAAkB;IAC/B,IAAIC,OAAO,CAAC,gDAAgD,CAAC,EAAE;MAC7D;MACA,IAAI,CAACH,SAAS,GAAG,IAAI,CAACA,SAAS,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKH,QAAQ,CAAC;MAC3D;MACA,IAAI,CAACR,eAAe,CAACO,cAAc,CAACC,QAAQ,CAACI,GAAI,CAAC,CAACP,SAAS,EAAE;;EAElE;EAEAQ,YAAY,CAACL,QAAkB;IAC7B,MAAMM,IAAI,GAAG,CAAC,OAAO,EAAEN,QAAQ,CAACI,GAAG,CAAC,CAAC,CAAC;IACtC,IAAI,CAACX,MAAM,CAACc,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC;EAC9B;;;AA3BWhB,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDVrCvB,8BAAwB;MAIJA,iBAAC;MAAAA,iBAAK;MAEVA,0BAAI;MAAAA,wBAAQ;MAAAA,iBAAK;MAEjBA,0BAAI;MAAAA,2BAAW;MAAAA,iBAAK;MAEpBA,2BAAI;MAAAA,yBAAQ;MAAAA,iBAAK;MAEjBA,2BAAI;MAAAA,yBAAQ;MAAAA,iBAAK;MAEjBA,2BAAI;MAAAA,qBAAI;MAAAA,iBAAK;MAEbA,2BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAIvBA,8BAAO;MACHA,0EAmBK;MACTA,iBAAQ;;;MApBqBA,gBAAY;MAAZA,uCAAY","names":["i0","PasswordManagerComponent","constructor","passwordService","router","ngOnInit","getPasswords","getAllPasswords","subscribe","passwords","deletePassword","password","confirm","filter","p","_id","editPassword","link","navigate","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\meanStackFrontend\\src\\app\\password-manager\\password-manager.component.html","C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\meanStackFrontend\\src\\app\\password-manager\\password-manager.component.ts"],"sourcesContent":["<div class=\"table-card\">\r\n    <table class=\"pass-table\">\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <!-- Column header for ID -->\r\n                <th>Category</th>\r\n                <!-- Column header for Category -->\r\n                <th>Application</th>\r\n                <!-- Column header for Application -->\r\n                <th>Username</th>\r\n                <!-- Column header for Username -->\r\n                <th>Password</th>\r\n                <!-- Column header for Password -->\r\n                <th>Edit</th>\r\n                <!-- Column header for Edit button -->\r\n                <th>Delete</th>\r\n                <!-- Column header for Delete button -->\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr *ngFor=\"let password of passwords\">\r\n                <td>{{password._id}}</td>\r\n                <!-- Display ID value -->\r\n                <td>{{password.category}}</td>\r\n                <!-- Display Category value -->\r\n                <td>{{password.app}}</td>\r\n                <!-- Display Application value -->\r\n                <td>{{password.userName}}</td>\r\n                <!-- Display Username value -->\r\n                <td>{{password.encryptedPassword}}</td>\r\n                <!-- Display Password value -->\r\n                <td>\r\n                    <button class=\"edit-btn\" [routerLink]=\"['/password-edit', password?._id]\">Edit</button>\r\n                    <!-- Edit button with router link to password edit page -->\r\n                </td>\r\n                <td>\r\n                    <button class=\"delete-btn\" (click)=\"deletePassword(password)\">Delete</button>\r\n                    <!-- Delete button with click event to delete the password -->\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n<!--Comment explanations:\r\n\r\n    The code represents an HTML template for displaying a table of passwords.\r\n    The table structure consists of a table header (<thead>) and a table body (<tbody>).\r\n    The table header row defines the column headers for ID, Category, Application, Username, Password, Edit, and Delete.\r\n    The table body uses the *ngFor directive to iterate over each password in the passwords array and generate a table row (<tr>) for each password.\r\n    Within each table row, the corresponding password details are displayed in the respective table cells (<td>) using interpolation ({{ }}).\r\n    The \"Edit\" button is styled with the class \"edit-btn\" and has a router link ([routerLink]) that navigates to the password edit page, passing the password ID as a route parameter.\r\n    The \"Delete\" button is styled with the class \"delete-btn\" and triggers the deletePassword() method when clicked, passing the corresponding password object.\r\n    Overall, this code generates a dynamic table of passwords with editable and deletable rows.-->","import { Component, OnInit } from '@angular/core';\r\nimport { Password } from '../password.interface';\r\nimport { PasswordService } from '../password-store.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-password-list',\r\n  templateUrl: './password-manager.component.html',\r\n  styleUrls: ['./password-manager.component.css']\r\n})\r\nexport class PasswordManagerComponent implements OnInit {\r\n  passwords!: Password[]; // Represents the list of passwords\r\n\r\n  constructor(private passwordService: PasswordService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getPasswords(); // Retrieves the passwords when the component is initialized\r\n  }\r\n\r\n  getPasswords(): void {\r\n    // Retrieves all passwords from the password service\r\n    this.passwordService.getAllPasswords()\r\n      .subscribe(passwords => this.passwords = passwords);\r\n  }\r\n\r\n  deletePassword(password: Password): void {\r\n    if (confirm('Are you sure you want to delete this password?')) {\r\n      // Removes the password from the list\r\n      this.passwords = this.passwords.filter(p => p !== password);\r\n      // Calls the password service to delete the password\r\n      this.passwordService.deletePassword(password._id!).subscribe();\r\n    }\r\n  }\r\n\r\n  editPassword(password: Password): void {\r\n    const link = ['/edit', password._id]; // Constructs the router link for editing the password\r\n    this.router.navigate(link); // Navigates to the password edit page\r\n  }\r\n}\r\n//Comment explanations:\r\n\r\n//The code represents a TypeScript component for managing passwords.\r\n//It imports necessary dependencies from Angular core and custom files.\r\n//The component class is defined with the necessary properties and methods.\r\n//The constructor injects the required dependencies for the component.\r\n//The ngOnInit() method is called when the component is initialized and retrieves the passwords by calling getPasswords().\r\n//The getPasswords() method fetches all passwords from the password service and assigns them to the passwords property.\r\n//The deletePassword() method is called when a password needs to be deleted. It removes the password from the list and calls the password service to delete it.\r\n//The editPassword() method is called when a password needs to be edited. It constructs the router link for editing the password and navigates to the password edit page using the Router service.\r\n//Overall, this code manages the retrieval, deletion, and editing of passwords in the password manager component.\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}